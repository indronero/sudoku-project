{"ast":null,"code":"var _jsxFileName = \"/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuCell.js\";\nimport React from 'react';\nimport { Grid } from '@mui/material';\nimport './SudokuGrid.css'; // Import your CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ComparisonSudokuCell = _ref => {\n  let {\n    cellData,\n    manualPencilMode,\n    manualPencilColors,\n    manualPencilMarks,\n    handlePencilMarksChange,\n    handleCellChange,\n    showPencilMarks,\n    isOriginalCell,\n    isUserCell,\n    pencilMarks,\n    generatedCellValue,\n    selectedColor,\n    applyColorToCell\n  } = _ref;\n  const {\n    value,\n    symbol\n  } = cellData;\n  const getArrowIconRotation = cellValue => {\n    if (cellValue === '<') {\n      return 'rotate(180deg)';\n    } else if (cellValue === '>') {\n      return 'rotate(0deg)';\n    } else if (cellValue === 'v') {\n      return 'rotate(90deg)';\n    } else if (cellValue === '^') {\n      return 'rotate(270deg)';\n    }\n    return 'none';\n  };\n  const getBorderColor = cellValue => {\n    if (cellValue === '<') {\n      return 'red';\n    } else if (cellValue === '>') {\n      return 'green';\n    } else if (cellValue === 'v') {\n      return 'blue';\n    } else if (cellValue === '^') {\n      return 'orange';\n    }\n    return 'transparent';\n  };\n  const borderStyle = {\n    borderTop: symbol === '^' ? `2px solid ${getBorderColor('^')}` : 'none',\n    borderBottom: symbol === 'v' ? `2px solid ${getBorderColor('v')}` : 'none',\n    borderLeft: symbol === '<' ? `2px solid ${getBorderColor('<')}` : 'none',\n    borderRight: symbol === '>' ? `2px solid ${getBorderColor('>')}` : 'none'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-cell\",\n    style: borderStyle,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"symbol-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `arrow-icon ${symbol === '^' && 'up'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), value, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `arrow-icon ${symbol === '>' && 'right'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `arrow-icon ${symbol === '<' && 'left'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = ComparisonSudokuCell;\nexport default ComparisonSudokuCell;\nvar _c;\n$RefreshReg$(_c, \"ComparisonSudokuCell\");","map":{"version":3,"names":["React","Grid","jsxDEV","_jsxDEV","ComparisonSudokuCell","_ref","cellData","manualPencilMode","manualPencilColors","manualPencilMarks","handlePencilMarksChange","handleCellChange","showPencilMarks","isOriginalCell","isUserCell","pencilMarks","generatedCellValue","selectedColor","applyColorToCell","value","symbol","getArrowIconRotation","cellValue","getBorderColor","borderStyle","borderTop","borderBottom","borderLeft","borderRight","className","style","children","container","justifyContent","alignItems","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuCell.js"],"sourcesContent":["import React from 'react';\nimport { Grid } from '@mui/material';\nimport './SudokuGrid.css'; // Import your CSS file for styling\n\nconst ComparisonSudokuCell = ({\n  cellData,\n  manualPencilMode,\n  manualPencilColors,\n  manualPencilMarks,\n  handlePencilMarksChange,\n  handleCellChange,\n  showPencilMarks,\n  isOriginalCell,\n  isUserCell,\n  pencilMarks,\n  generatedCellValue,\n  selectedColor,\n  applyColorToCell,\n}) => {\n  const { value, symbol } = cellData;\n\n  const getArrowIconRotation = (cellValue) => {\n    if (cellValue === '<') {\n      return 'rotate(180deg)';\n    } else if (cellValue === '>') {\n      return 'rotate(0deg)';\n    } else if (cellValue === 'v') {\n      return 'rotate(90deg)';\n    } else if (cellValue === '^') {\n      return 'rotate(270deg)';\n    }\n    return 'none';\n  };\n\n  const getBorderColor = (cellValue) => {\n    if (cellValue === '<') {\n      return 'red';\n    } else if (cellValue === '>') {\n      return 'green';\n    } else if (cellValue === 'v') {\n      return 'blue';\n    } else if (cellValue === '^') {\n      return 'orange';\n    }\n    return 'transparent';\n  };\n\n  const borderStyle = {\n    borderTop: symbol === '^' ? `2px solid ${getBorderColor('^')}` : 'none',\n    borderBottom: symbol === 'v' ? `2px solid ${getBorderColor('v')}` : 'none',\n    borderLeft: symbol === '<' ? `2px solid ${getBorderColor('<')}` : 'none',\n    borderRight: symbol === '>' ? `2px solid ${getBorderColor('>')}` : 'none',\n  };\n\n  return (\n    <div className=\"sudoku-cell\" style={borderStyle}>\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n        <div className=\"symbol-container\">\n          <div className={`arrow-icon ${symbol === '^' && 'up'}`} />\n          {value}\n          <div className={`arrow-icon ${symbol === '>' && 'right'}`} />\n          <div className={`arrow-icon ${symbol === '<' && 'left'}`} />\n        </div>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ComparisonSudokuCell;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}