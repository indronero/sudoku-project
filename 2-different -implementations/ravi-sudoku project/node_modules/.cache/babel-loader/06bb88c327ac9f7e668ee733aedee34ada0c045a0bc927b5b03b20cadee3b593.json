{"ast":null,"code":"var _jsxFileName = \"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/SudokuGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport { updatePencilMarks, usePencilMarks } from './Pencil-Marking/PencilMarking';\nimport { generateRandomSudokuPuzzle } from './PuzzleGeneration';\nimport useManualPencilMarking from './Pencil-Marking/ManualPencilMarking';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\nimport KeyboardArrowLeftIcon from '@mui/icons-material/KeyboardArrowLeft';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SudokuGrid = () => {\n  _s();\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => ({\n    value: 0,\n    arrows: []\n  }))));\n  const [userAnswers, setUserAnswers] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const {\n    pencilMarks,\n    setPencilMarks,\n    showPencilMarks,\n    setShowPencilMarks,\n    handleGenerateMarksClick\n  } = usePencilMarks();\n  const {\n    manualPencilMarks,\n    setManualPencilMarks,\n    manualPencilMode,\n    setManualPencilMode,\n    setActiveCell,\n    handlePencilMarksChange,\n    applyColorToCell,\n    selectedColor,\n    setSelectedColor,\n    manualPencilColors\n  } = useManualPencilMarking(userAnswers, generatedPuzzle);\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (manualPencilMode) {\n      const clickedCellValue = manualPencilMarks[rowIndex][colIndex];\n      if (clickedCellValue === '') {\n        const newPencilMarks = [...manualPencilMarks];\n        newPencilMarks[rowIndex][colIndex] = [];\n        setManualPencilMarks(newPencilMarks);\n      }\n      setActiveCell(`${rowIndex}-${colIndex}`);\n    }\n  };\n  const handleCellChange = (e, rowIndex, colIndex) => {\n    const {\n      value\n    } = e.target;\n    if (value === '' || /^[1-9]$/.test(value)) {\n      const newUserAnswers = [...userAnswers];\n      newUserAnswers[rowIndex][colIndex] = value === '' ? '' : parseInt(value, 10);\n      setUserAnswers(newUserAnswers);\n      const updatedPencilMarks = updatePencilMarks(newUserAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  };\n  const handleAutoGenerateClick = () => {\n    const puzzleString = generateRandomSudokuPuzzle();\n    setUserAnswers(Array.from({\n      length: 9\n    }, () => Array.from({\n      length: 9\n    }, () => '')));\n    setManualPencilMarks(Array.from({\n      length: 9\n    }, () => Array.from({\n      length: 9\n    }, () => [])));\n    setGeneratedPuzzle(Array.from({\n      length: 9\n    }, () => Array.from({\n      length: 9\n    }, () => ({\n      value: 0,\n      arrows: []\n    }))));\n    const generatedPuzzle = puzzleString.match(/.{9}/g).map(row => row.split('').map(cell => cell === '0' ? {\n      value: 0,\n      arrows: []\n    } : {\n      value: parseInt(cell, 10),\n      arrows: []\n    }));\n    setGeneratedPuzzle(generatedPuzzle);\n    const updatedPencilMarks = updatePencilMarks(generatedPuzzle);\n    setPencilMarks(updatedPencilMarks);\n    setShowPencilMarks(false);\n  };\n  const getSubgridIndex = (rowIndex, colIndex) => {\n    const subgridRow = Math.floor(rowIndex / 3);\n    const subgridCol = Math.floor(colIndex / 3);\n    return subgridRow * 3 + subgridCol;\n  };\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-board\",\n    children: [generatedPuzzle.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-row\",\n      children: row.map((cellData, colIndex) => {\n        const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n        const isOriginalCell = generatedPuzzle[rowIndex][colIndex].value !== 0;\n        const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: arrowHtml\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `manual-pencil-container ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: `cell-${rowIndex}-${colIndex}`,\n              type: \"text\",\n              className: `sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex].value !== 0 ? 'generated-cell' : ''} ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`,\n              value: !manualPencilMode ? userAnswers[rowIndex][colIndex] : '',\n              placeholder: cellData.value !== 0 ? cellData.value : '',\n              maxLength: 1,\n              onInput: e => handleCellChange(e, rowIndex, colIndex),\n              readOnly: isOriginalCell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this), manualPencilMarks[rowIndex][colIndex].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"manual-pencil-mark-text\",\n              style: {\n                color: manualPencilColors[rowIndex][colIndex]\n              },\n              children: manualPencilMarks[rowIndex][colIndex].map((mark, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"manual-pencil-mark\",\n                children: mark !== null ? mark : ''\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this), cellData.arrows.map((arrow, arrowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `arrow-container arrow-${arrow.direction}`,\n              style: {\n                transform: `rotate(${arrow.value === '<' ? '180deg' : '0'})`,\n                border: `1px solid ${manualPencilColors[rowIndex][colIndex]}`\n              },\n              children: [arrow.direction === 'up' && /*#__PURE__*/_jsxDEV(KeyboardArrowUpIcon, {\n                className: \"arrow-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 52\n              }, this), arrow.direction === 'down' && /*#__PURE__*/_jsxDEV(KeyboardArrowDownIcon, {\n                className: \"arrow-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 54\n              }, this), arrow.direction === 'right' && /*#__PURE__*/_jsxDEV(KeyboardArrowRightIcon, {\n                className: \"arrow-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 55\n              }, this), arrow.direction === 'left' && /*#__PURE__*/_jsxDEV(KeyboardArrowLeftIcon, {\n                className: \"arrow-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 54\n              }, this)]\n            }, arrowIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), showPencilMarks && cellData.value === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pencil-marks\",\n            children: pencilMarks[rowIndex][colIndex].map(mark => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"pencil-mark\",\n              children: mark\n            }, mark, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 19\n          }, this)]\n        }, colIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-picker-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: selectedColor,\n        onChange: e => setSelectedColor(e.target.value),\n        onClick: applyColorToCell,\n        className: \"color-picker-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setManualPencilMode(!manualPencilMode),\n      children: manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateMarksClick,\n      children: \"Generate Pencil Marks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAutoGenerateClick,\n      children: \"Auto Generate Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuGrid, \"BBBApd/zOlodpV02c6wN/kCi8Qw=\", false, function () {\n  return [usePencilMarks, useManualPencilMarking];\n});\n_c = SudokuGrid;\nexport default SudokuGrid;\nvar _c;\n$RefreshReg$(_c, \"SudokuGrid\");","map":{"version":3,"names":["React","useState","useEffect","updatePencilMarks","usePencilMarks","generateRandomSudokuPuzzle","useManualPencilMarking","KeyboardArrowDownIcon","KeyboardArrowUpIcon","KeyboardArrowRightIcon","KeyboardArrowLeftIcon","jsxDEV","_jsxDEV","SudokuGrid","_s","generatedPuzzle","setGeneratedPuzzle","Array","from","length","value","arrows","userAnswers","setUserAnswers","pencilMarks","setPencilMarks","showPencilMarks","setShowPencilMarks","handleGenerateMarksClick","manualPencilMarks","setManualPencilMarks","manualPencilMode","setManualPencilMode","setActiveCell","handlePencilMarksChange","applyColorToCell","selectedColor","setSelectedColor","manualPencilColors","handleCellClick","rowIndex","colIndex","clickedCellValue","newPencilMarks","handleCellChange","e","target","test","newUserAnswers","parseInt","updatedPencilMarks","handleAutoGenerateClick","puzzleString","match","map","row","split","cell","getSubgridIndex","subgridRow","Math","floor","subgridCol","className","children","cellData","subgridIndex","isOriginalCell","isUserCell","onClick","dangerouslySetInnerHTML","__html","arrowHtml","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","maxLength","onInput","readOnly","style","color","mark","index","arrow","arrowIndex","direction","transform","border","onChange","_c","$RefreshReg$"],"sources":["/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/SudokuGrid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport { updatePencilMarks, usePencilMarks } from './Pencil-Marking/PencilMarking';\nimport { generateRandomSudokuPuzzle } from './PuzzleGeneration';\nimport useManualPencilMarking from './Pencil-Marking/ManualPencilMarking';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\nimport KeyboardArrowLeftIcon from '@mui/icons-material/KeyboardArrowLeft';\n\nconst SudokuGrid = () => {\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => ({ value: 0, arrows: [] }))));\n  const [userAnswers, setUserAnswers] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const { pencilMarks, setPencilMarks, showPencilMarks, setShowPencilMarks, handleGenerateMarksClick } = usePencilMarks();\n  const { manualPencilMarks, setManualPencilMarks, manualPencilMode, setManualPencilMode, setActiveCell, handlePencilMarksChange, applyColorToCell, selectedColor, setSelectedColor, manualPencilColors } = useManualPencilMarking(userAnswers, generatedPuzzle);\n\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (manualPencilMode) {\n      const clickedCellValue = manualPencilMarks[rowIndex][colIndex];\n      if (clickedCellValue === '') {\n        const newPencilMarks = [...manualPencilMarks];\n        newPencilMarks[rowIndex][colIndex] = [];\n        setManualPencilMarks(newPencilMarks);\n      }\n      setActiveCell(`${rowIndex}-${colIndex}`);\n    }\n  };\n\n  const handleCellChange = (e, rowIndex, colIndex) => {\n    const { value } = e.target;\n    if (value === '' || /^[1-9]$/.test(value)) {\n      const newUserAnswers = [...userAnswers];\n      newUserAnswers[rowIndex][colIndex] = value === '' ? '' : parseInt(value, 10);\n      setUserAnswers(newUserAnswers);\n\n      const updatedPencilMarks = updatePencilMarks(newUserAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  };\n\n  const handleAutoGenerateClick = () => {\n    const puzzleString = generateRandomSudokuPuzzle();\n\n    setUserAnswers(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n    setManualPencilMarks(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => [])));\n    setGeneratedPuzzle(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => ({ value: 0, arrows: [] }))));\n\n    const generatedPuzzle = puzzleString\n      .match(/.{9}/g)\n      .map(row => row.split('').map(cell => (cell === '0' ? { value: 0, arrows: [] } : { value: parseInt(cell, 10), arrows: [] })));\n\n    setGeneratedPuzzle(generatedPuzzle);\n\n    const updatedPencilMarks = updatePencilMarks(generatedPuzzle);\n    setPencilMarks(updatedPencilMarks);\n    setShowPencilMarks(false);\n  };\n\n  const getSubgridIndex = (rowIndex, colIndex) => {\n    const subgridRow = Math.floor(rowIndex / 3);\n    const subgridCol = Math.floor(colIndex / 3);\n    return subgridRow * 3 + subgridCol;\n  };\n\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n\n  return (\n    <div className=\"sudoku-board\">\n      {generatedPuzzle.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"sudoku-row\">\n          {row.map((cellData, colIndex) => {\n            const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n            const isOriginalCell = generatedPuzzle[rowIndex][colIndex].value !== 0;\n            const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n\n            return (\n              <div\n                key={colIndex}\n                className={`sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                <div dangerouslySetInnerHTML={{ __html: arrowHtml }} />\n                <div className={`manual-pencil-container ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`}>\n                  <input\n                    id={`cell-${rowIndex}-${colIndex}`}\n                    type=\"text\"\n                    className={`sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex].value !== 0 ? 'generated-cell' : ''} ${\n                      manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''\n                    }`}\n                    value={!manualPencilMode ? userAnswers[rowIndex][colIndex] : ''}\n                    placeholder={cellData.value !== 0 ? cellData.value : ''}\n                    maxLength={1}\n                    onInput={(e) => handleCellChange(e, rowIndex, colIndex)}\n                    readOnly={isOriginalCell}\n                  />\n                  {manualPencilMarks[rowIndex][colIndex].length > 0 && (\n                    <div className=\"manual-pencil-mark-text\" style={{ color: manualPencilColors[rowIndex][colIndex] }}>\n                      {manualPencilMarks[rowIndex][colIndex].map((mark, index) => (\n                        <span key={index} className=\"manual-pencil-mark\">\n                          {mark !== null ? mark : ''}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                  {cellData.arrows.map((arrow, arrowIndex) => (\n                    <div\n                      key={arrowIndex}\n                      className={`arrow-container arrow-${arrow.direction}`}\n                      style={{\n                        transform: `rotate(${arrow.value === '<' ? '180deg' : '0'})`,\n                        border: `1px solid ${manualPencilColors[rowIndex][colIndex]}`,\n                      }}\n                    >\n                      {arrow.direction === 'up' && <KeyboardArrowUpIcon className=\"arrow-icon\" />}\n                      {arrow.direction === 'down' && <KeyboardArrowDownIcon className=\"arrow-icon\" />}\n                      {arrow.direction === 'right' && <KeyboardArrowRightIcon className=\"arrow-icon\" />}\n                      {arrow.direction === 'left' && <KeyboardArrowLeftIcon className=\"arrow-icon\" />}\n                    </div>\n                  ))}\n                </div>\n                {showPencilMarks && cellData.value === 0 && (\n                  <div className=\"pencil-marks\">\n                    {pencilMarks[rowIndex][colIndex].map((mark) => (\n                      <span key={mark} className=\"pencil-mark\">\n                        {mark}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      ))}\n      <div className=\"color-picker-container\">\n        <input\n          type=\"color\"\n          value={selectedColor}\n          onChange={(e) => setSelectedColor(e.target.value)}\n          onClick={applyColorToCell}\n          className=\"color-picker-input\"\n        />\n      </div>\n      <button onClick={() => setManualPencilMode(!manualPencilMode)}>\n        {manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'}\n      </button>\n      <button onClick={handleGenerateMarksClick}>Generate Pencil Marks</button>\n      <button onClick={handleAutoGenerateClick}>Auto Generate Puzzle</button>\n    </div>\n  );\n};\n\nexport default SudokuGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}