{"ast":null,"code":"var _jsxFileName = \"/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuCell.js\";\nimport React from 'react';\nimport { Grid } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ComparisonSudokuCell = _ref => {\n  let {\n    cellData,\n    adjacentBorders,\n    symbol,\n    handleCellClick,\n    showPencilMarks,\n    manualPencilMarks,\n    pencilMarks,\n    generatedCellValue,\n    isOriginalCell,\n    isUserCell,\n    applyColorToCell\n  } = _ref;\n  const renderArrowIcon = border => {\n    if (adjacentBorders.includes(border)) {\n      const arrowDirection = getArrowDirection(border);\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `arrow-icon ${arrowDirection}`,\n        style: {\n          transform: getArrowIconRotation(symbol, border)\n        },\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  const getArrowIconRotation = (cellValue, border) => {\n    const rotations = {\n      '^': 'rotate(0deg)',\n      'v': 'rotate(180deg)',\n      '<': 'rotate(90deg)',\n      '>': 'rotate(270deg)'\n    };\n    return rotations[cellValue] || 'none';\n  };\n  const getArrowDirection = border => {\n    const directionMap = {\n      top: 'up',\n      bottom: 'down',\n      left: 'left',\n      right: 'right'\n    };\n    return directionMap[border];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`,\n    onClick: handleCellClick,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: `sudoku-cell ${generatedCellValue !== '' ? 'generated-cell' : ''}`,\n      value: generatedCellValue !== '' ? generatedCellValue : '',\n      readOnly: isOriginalCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), showPencilMarks && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pencil-marks\",\n      children: pencilMarks.map((mark, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pencil-mark\",\n        children: mark\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        justifyContent: \"space-between\",\n        children: [renderArrowIcon('top'), renderArrowIcon('bottom')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        justifyContent: \"space-between\",\n        children: [renderArrowIcon('left'), generatedCellValue, renderArrowIcon('right')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_c = ComparisonSudokuCell;\nexport default ComparisonSudokuCell;\nvar _c;\n$RefreshReg$(_c, \"ComparisonSudokuCell\");","map":{"version":3,"names":["React","Grid","jsxDEV","_jsxDEV","ComparisonSudokuCell","_ref","cellData","adjacentBorders","symbol","handleCellClick","showPencilMarks","manualPencilMarks","pencilMarks","generatedCellValue","isOriginalCell","isUserCell","applyColorToCell","renderArrowIcon","border","includes","arrowDirection","getArrowDirection","className","style","transform","getArrowIconRotation","children","fileName","_jsxFileName","lineNumber","columnNumber","cellValue","rotations","directionMap","top","bottom","left","right","onClick","type","value","readOnly","map","mark","index","container","direction","item","justifyContent","_c","$RefreshReg$"],"sources":["/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuCell.js"],"sourcesContent":["import React from 'react';\nimport { Grid } from '@mui/material';\n\nconst ComparisonSudokuCell = ({\n  cellData,\n  adjacentBorders,\n  symbol,\n  handleCellClick,\n  showPencilMarks,\n  manualPencilMarks,\n  pencilMarks,\n  generatedCellValue,\n  isOriginalCell,\n  isUserCell,\n  applyColorToCell,\n}) => {\n  const renderArrowIcon = (border) => {\n    if (adjacentBorders.includes(border)) {\n      const arrowDirection = getArrowDirection(border);\n      return (\n        <span className={`arrow-icon ${arrowDirection}`} style={{ transform: getArrowIconRotation(symbol, border) }}>\n          &rarr;\n        </span>\n      );\n    }\n    return null;\n  };\n\n  const getArrowIconRotation = (cellValue, border) => {\n    const rotations = {\n      '^': 'rotate(0deg)',\n      'v': 'rotate(180deg)',\n      '<': 'rotate(90deg)',\n      '>': 'rotate(270deg)',\n    };\n    return rotations[cellValue] || 'none';\n  };\n\n  const getArrowDirection = (border) => {\n    const directionMap = {\n      top: 'up',\n      bottom: 'down',\n      left: 'left',\n      right: 'right',\n    };\n    return directionMap[border];\n  };\n\n  return (\n    <div\n      className={`sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`}\n      onClick={handleCellClick}\n    >\n      <input\n        type=\"text\"\n        className={`sudoku-cell ${generatedCellValue !== '' ? 'generated-cell' : ''}`}\n        value={generatedCellValue !== '' ? generatedCellValue : ''}\n        readOnly={isOriginalCell}\n      />\n\n      {showPencilMarks && (\n        <div className=\"pencil-marks\">\n          {pencilMarks.map((mark, index) => (\n            <span key={index} className=\"pencil-mark\">\n              {mark}\n            </span>\n          ))}\n        </div>\n      )}\n\n      <Grid container direction=\"column\">\n        <Grid item container justifyContent=\"space-between\">\n          {renderArrowIcon('top')}\n          {renderArrowIcon('bottom')}\n        </Grid>\n        <Grid item container justifyContent=\"space-between\">\n          {renderArrowIcon('left')}\n          {generatedCellValue}\n          {renderArrowIcon('right')}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ComparisonSudokuCell;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}