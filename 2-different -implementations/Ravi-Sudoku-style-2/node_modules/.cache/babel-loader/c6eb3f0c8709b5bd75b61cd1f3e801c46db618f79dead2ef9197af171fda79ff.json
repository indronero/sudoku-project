{"ast":null,"code":"var _jsxFileName = \"/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/SudokuGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport { updatePencilMarks, usePencilMarks } from './PencilMarking';\n//import { generateRandomSudokuPuzzle } from './PuzzleGeneration';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SudokuBoard = () => {\n  _s();\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const [userAnswers, setUserAnswers] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const {\n    pencilMarks,\n    setPencilMarks,\n    showPencilMarks,\n    setShowPencilMarks,\n    handleGenerateMarksClick\n  } = usePencilMarks();\n  const [manualPencilMarks, setManualPencilMarks] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => [])));\n  const [manualPencilMode, setManualPencilMode] = useState(false);\n  const [activeCell, setActiveCell] = useState(null);\n  const [manualPencilColors, setManualPencilColors] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const [selectedColor, setSelectedColor] = useState('#000000');\n  const applyColorToCell = (rowIndex, colIndex) => {\n    if (manualPencilColors[rowIndex] && manualPencilColors[rowIndex][colIndex]) {\n      // Check if the index exists\n      const newManualPencilColors = [...manualPencilColors];\n      newManualPencilColors[rowIndex][colIndex] = selectedColor;\n      setManualPencilColors(newManualPencilColors);\n    }\n  };\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (manualPencilMode) {\n      const clickedCellValue = manualPencilMarks[rowIndex][colIndex];\n      if (clickedCellValue === '') {\n        const newPencilMarks = [...manualPencilMarks];\n        newPencilMarks[rowIndex][colIndex] = [];\n        setManualPencilMarks(newPencilMarks);\n      }\n      setActiveCell(`${rowIndex}-${colIndex}`);\n    }\n  };\n  const handlePencilMarksChange = (e, rowIndex, colIndex) => {\n    const {\n      value\n    } = e.target;\n    const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n    const isGeneratedCell = generatedPuzzle[rowIndex][colIndex] !== '';\n    if (activeCell !== null && manualPencilMode && !isUserCell && !isGeneratedCell) {\n      const newManualPencilMarks = [...manualPencilMarks];\n      const newManualPencilColors = [...manualPencilColors];\n\n      // Parse the input value and filter out non-numeric characters\n      const newMarks = value.split('').filter(char => /\\d/.test(char)).map(mark => parseInt(mark, 10));\n\n      // Update the manual pencil marks for the clicked cell\n      newManualPencilMarks[rowIndex][colIndex] = newMarks;\n\n      // Set the color for the clicked cell using the selected color\n      newManualPencilColors[rowIndex][colIndex] = selectedColor;\n      setManualPencilColors(newManualPencilColors);\n\n      // Update the state with the new manual pencil marks\n      setManualPencilMarks(newManualPencilMarks);\n\n      // Log the manual pencil marks for the clicked cell\n      console.log(`Manual Pencil Marks for Cell [${rowIndex}][${colIndex}]:`, newMarks);\n    }\n  };\n  const handleCellChange = (e, rowIndex, colIndex) => {\n    const {\n      value\n    } = e.target;\n    if (!manualPencilMode && value === '' || /^[1-9]$/.test(value)) {\n      const newUserAnswers = [...userAnswers];\n      newUserAnswers[rowIndex][colIndex] = value === '' ? '' : parseInt(value, 10);\n      setUserAnswers(newUserAnswers);\n      console.log('Updated userAnswers:', newUserAnswers);\n\n      // Generate and update pencil marks for the entire board\n      const updatedPencilMarks = updatePencilMarks(newUserAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  };\n\n  /*const handleGenerateMarksClick = () => {\n      setShowPencilMarks((prevShowPencilMarks) => !prevShowPencilMarks); // Toggle the showPencilMarks state\n  };\n     const handleAutoGenerateClick = () => {\n    const puzzleString = generateRandomSudokuPuzzle();\n    const generatedPuzzle = puzzleString\n      .match(/.{9}/g)\n      .map(row => row.split(''));\n    setBoard(generatedPuzzle);\n    const updatedPencilMarks = updatePencilMarks(generatedPuzzle);\n    setPencilMarks(updatedPencilMarks);\n    setShowPencilMarks(true);\n    setShowManualEntry(false);\n  };*/\n\n  const handleAutoGenerateClick = async () => {\n    try {\n      // Clear the userAnswers array\n      setUserAnswers(Array.from({\n        length: 9\n      }, () => Array.from({\n        length: 9\n      }, () => '')));\n      // Make an API call to fetch the Sudoku puzzle\n      const response = await fetch('https://sudoku-api.vercel.app/api/dosuku'); // Replace 'YOUR_API_URL' with the actual API endpoint\n      if (!response.ok) {\n        throw new Error('Failed to fetch the Sudoku puzzle. Please check the API endpoint or try again later.');\n      }\n\n      // Parse the response and extract the 9x9 grid array\n      const data = await response.json();\n      const gridArray = data.newboard.grids[0].value;\n\n      // Convert the grid array to the format expected by the board state\n      const newGeneratedPuzzle = gridArray.map(row => row.map(value => value === 0 ? '' : value));\n\n      // Set the generated puzzle to the state\n      setGeneratedPuzzle(newGeneratedPuzzle);\n\n      // Generate and update pencil marks for the entire board\n      const updatedPencilMarks = updatePencilMarks(newGeneratedPuzzle);\n      setPencilMarks(updatedPencilMarks);\n\n      // Set the state to show pencil marks and hide manual entry mode\n      setShowPencilMarks(false);\n      console.log('Updated generatedPuzzle:', newGeneratedPuzzle);\n      console.log('Cleared userAnswers:', userAnswers);\n    } catch (error) {\n      console.error('Error fetching the Sudoku puzzle:', error.message);\n      // Handle error (e.g., show an error message to the user)\n    }\n  };\n\n  const getSubgridIndex = (rowIndex, colIndex) => {\n    const subgridRow = Math.floor(rowIndex / 3);\n    const subgridCol = Math.floor(colIndex / 3);\n    return subgridRow * 3 + subgridCol;\n  };\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-board\",\n    children: [generatedPuzzle.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-row\",\n      children: row.map((cellValue, colIndex) => {\n        const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n        const isOriginalCell = generatedPuzzle[rowIndex][colIndex] !== '';\n        const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: [manualPencilMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `cell-${rowIndex}-${colIndex}`,\n            type: \"text\",\n            className: `sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex] !== '' ? 'generated-cell' : ''}`,\n            style: {\n              color: manualPencilColors[rowIndex][colIndex]\n            },\n            value: userAnswers[rowIndex][colIndex] !== '' ? userAnswers[rowIndex][colIndex] : generatedPuzzle[rowIndex][colIndex] !== '' ? generatedPuzzle[rowIndex][colIndex] : manualPencilMarks[rowIndex][colIndex].map(mark => mark !== null ? mark : '').join(' '),\n            placeholder: \"\",\n            onChange: e => handlePencilMarksChange(e, rowIndex, colIndex),\n            readOnly: isOriginalCell && isUserCell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `cell-${rowIndex}-${colIndex}`,\n            type: \"text\",\n            className: `sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex] !== '' ? 'generated-cell' : ''}`,\n            style: {\n              color: manualPencilColors[rowIndex][colIndex]\n            },\n            value: userAnswers[rowIndex][colIndex] !== '' ? userAnswers[rowIndex][colIndex] : manualPencilMarks[rowIndex][colIndex].map(mark => mark !== null ? mark : '').join(' '),\n            placeholder: cellValue !== '' ? cellValue : '',\n            maxLength: 1,\n            onChange: e => handleCellChange(e, rowIndex, colIndex),\n            readOnly: isOriginalCell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 19\n          }, this), showPencilMarks && cellValue === '' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pencil-marks\",\n            children: pencilMarks[rowIndex][colIndex].map(mark => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"pencil-mark\",\n              children: mark\n            }, mark, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 19\n          }, this)]\n        }, colIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-picker-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: selectedColor,\n        onChange: e => setSelectedColor(e.target.value),\n        onClick: applyColorToCell,\n        className: \"color-picker-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setManualPencilMode(!manualPencilMode),\n      children: manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateMarksClick,\n      children: \"Generate Pencil Marks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAutoGenerateClick,\n      children: \"Auto Generate Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuBoard, \"uBiE+UiLNd3BHpunyqbmcMJrf3g=\", false, function () {\n  return [usePencilMarks];\n});\n_c = SudokuBoard;\nexport default SudokuBoard;\nvar _c;\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","useState","useEffect","updatePencilMarks","usePencilMarks","jsxDEV","_jsxDEV","SudokuBoard","_s","generatedPuzzle","setGeneratedPuzzle","Array","from","length","userAnswers","setUserAnswers","pencilMarks","setPencilMarks","showPencilMarks","setShowPencilMarks","handleGenerateMarksClick","manualPencilMarks","setManualPencilMarks","manualPencilMode","setManualPencilMode","activeCell","setActiveCell","manualPencilColors","setManualPencilColors","selectedColor","setSelectedColor","applyColorToCell","rowIndex","colIndex","newManualPencilColors","handleCellClick","clickedCellValue","newPencilMarks","handlePencilMarksChange","e","value","target","isUserCell","isGeneratedCell","newManualPencilMarks","newMarks","split","filter","char","test","map","mark","parseInt","console","log","handleCellChange","newUserAnswers","updatedPencilMarks","handleAutoGenerateClick","response","fetch","ok","Error","data","json","gridArray","newboard","grids","newGeneratedPuzzle","row","error","message","getSubgridIndex","subgridRow","Math","floor","subgridCol","className","children","cellValue","subgridIndex","isOriginalCell","onClick","id","type","style","color","join","placeholder","onChange","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","maxLength","_c","$RefreshReg$"],"sources":["/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/SudokuGrid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport { updatePencilMarks, usePencilMarks } from './PencilMarking';\n//import { generateRandomSudokuPuzzle } from './PuzzleGeneration';\n\nconst SudokuBoard = () => {\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const [userAnswers, setUserAnswers] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const { pencilMarks, setPencilMarks, showPencilMarks, setShowPencilMarks, handleGenerateMarksClick } = usePencilMarks();\n\n  const [manualPencilMarks, setManualPencilMarks] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => [])));\n  const [manualPencilMode, setManualPencilMode] = useState(false);\n  const [activeCell, setActiveCell] = useState(null);\n\n  const [manualPencilColors, setManualPencilColors] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const [selectedColor, setSelectedColor] = useState('#000000'); \n\n  const applyColorToCell = (rowIndex, colIndex) => {\n    if (manualPencilColors[rowIndex] && manualPencilColors[rowIndex][colIndex]) { // Check if the index exists\n      const newManualPencilColors = [...manualPencilColors];\n      newManualPencilColors[rowIndex][colIndex] = selectedColor;\n      setManualPencilColors(newManualPencilColors);\n    }\n  };\n\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (manualPencilMode) {\n      const clickedCellValue = manualPencilMarks[rowIndex][colIndex];\n      if (clickedCellValue === '') {\n        const newPencilMarks = [...manualPencilMarks];\n        newPencilMarks[rowIndex][colIndex] = [];\n        setManualPencilMarks(newPencilMarks);\n      }\n      setActiveCell(`${rowIndex}-${colIndex}`);\n    }\n  };\n\n  const handlePencilMarksChange = (e, rowIndex, colIndex) => {\n    const { value } = e.target;\n    const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n    const isGeneratedCell = generatedPuzzle[rowIndex][colIndex] !== '';\n  \n    if (activeCell !== null && manualPencilMode && !isUserCell && !isGeneratedCell) {\n      const newManualPencilMarks = [...manualPencilMarks];\n      const newManualPencilColors = [...manualPencilColors]; \n  \n      // Parse the input value and filter out non-numeric characters\n      const newMarks = value.split('').filter(char => /\\d/.test(char)).map(mark => parseInt(mark, 10));\n  \n      // Update the manual pencil marks for the clicked cell\n      newManualPencilMarks[rowIndex][colIndex] = newMarks;\n  \n      // Set the color for the clicked cell using the selected color\n      newManualPencilColors[rowIndex][colIndex] = selectedColor;\n      setManualPencilColors(newManualPencilColors);\n  \n      // Update the state with the new manual pencil marks\n      setManualPencilMarks(newManualPencilMarks);\n  \n      // Log the manual pencil marks for the clicked cell\n      console.log(`Manual Pencil Marks for Cell [${rowIndex}][${colIndex}]:`, newMarks);\n    }\n  };  \n\n  const handleCellChange = (e, rowIndex, colIndex) => {\n    const { value } = e.target;\n    if (!manualPencilMode && value === '' || /^[1-9]$/.test(value)) {\n      const newUserAnswers = [...userAnswers];\n      newUserAnswers[rowIndex][colIndex] = value === '' ? '' : parseInt(value, 10);\n      setUserAnswers(newUserAnswers);\n      console.log('Updated userAnswers:', newUserAnswers);\n\n      // Generate and update pencil marks for the entire board\n      const updatedPencilMarks = updatePencilMarks(newUserAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  };\n\n  /*const handleGenerateMarksClick = () => {\n      setShowPencilMarks((prevShowPencilMarks) => !prevShowPencilMarks); // Toggle the showPencilMarks state\n  };\n\n    const handleAutoGenerateClick = () => {\n    const puzzleString = generateRandomSudokuPuzzle();\n    const generatedPuzzle = puzzleString\n      .match(/.{9}/g)\n      .map(row => row.split(''));\n    setBoard(generatedPuzzle);\n    const updatedPencilMarks = updatePencilMarks(generatedPuzzle);\n    setPencilMarks(updatedPencilMarks);\n    setShowPencilMarks(true);\n    setShowManualEntry(false);\n  };*/\n\n  const handleAutoGenerateClick = async () => {\n    try {\n      // Clear the userAnswers array\n      setUserAnswers(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n      // Make an API call to fetch the Sudoku puzzle\n      const response = await fetch('https://sudoku-api.vercel.app/api/dosuku'); // Replace 'YOUR_API_URL' with the actual API endpoint\n      if (!response.ok) {\n        throw new Error('Failed to fetch the Sudoku puzzle. Please check the API endpoint or try again later.');\n      }\n\n      // Parse the response and extract the 9x9 grid array\n      const data = await response.json();\n      const gridArray = data.newboard.grids[0].value;\n\n      // Convert the grid array to the format expected by the board state\n      const newGeneratedPuzzle = gridArray.map(row => row.map(value => (value === 0 ? '' : value)));\n\n      // Set the generated puzzle to the state\n      setGeneratedPuzzle(newGeneratedPuzzle);\n\n      // Generate and update pencil marks for the entire board\n      const updatedPencilMarks = updatePencilMarks(newGeneratedPuzzle);\n      setPencilMarks(updatedPencilMarks);\n\n      // Set the state to show pencil marks and hide manual entry mode\n      setShowPencilMarks(false);\n      console.log('Updated generatedPuzzle:', newGeneratedPuzzle);\n      console.log('Cleared userAnswers:', userAnswers);\n\n    } catch (error) {\n      console.error('Error fetching the Sudoku puzzle:', error.message);\n      // Handle error (e.g., show an error message to the user)\n    }\n  };\n\n  const getSubgridIndex = (rowIndex, colIndex) => {\n    const subgridRow = Math.floor(rowIndex / 3);\n    const subgridCol = Math.floor(colIndex / 3);\n    return subgridRow * 3 + subgridCol;\n  };\n\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n\n  return (\n    <div className=\"sudoku-board\">\n      {generatedPuzzle.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"sudoku-row\">\n          {row.map((cellValue, colIndex) => {\n            const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n            const isOriginalCell = generatedPuzzle[rowIndex][colIndex] !== '';\n            const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n\n            return (\n              <div\n                key={colIndex}\n                className={`sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {manualPencilMode ? (\n                  <input\n                    id={`cell-${rowIndex}-${colIndex}`}\n                    type=\"text\"\n                    className={`sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex] !== '' ? 'generated-cell' : ''}`}\n                    style={{ color: manualPencilColors[rowIndex][colIndex] }}\n                    value={\n                      userAnswers[rowIndex][colIndex] !== ''\n                        ? userAnswers[rowIndex][colIndex]\n                        : generatedPuzzle[rowIndex][colIndex] !== ''\n                          ? generatedPuzzle[rowIndex][colIndex]\n                          : manualPencilMarks[rowIndex][colIndex].map(mark => mark !== null ? mark : '').join(' ')\n                    }\n                    placeholder=\"\"\n                    onChange={(e) => handlePencilMarksChange(e, rowIndex, colIndex)}\n                    readOnly={isOriginalCell && isUserCell}\n                  />\n                ) : (\n                  <input\n                    id={`cell-${rowIndex}-${colIndex}`}\n                    type=\"text\"\n                    className={`sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex] !== '' ? 'generated-cell' : ''}`}\n                    style={{ color: manualPencilColors[rowIndex][colIndex] }}\n                    value={\n                      userAnswers[rowIndex][colIndex] !== ''\n                        ? userAnswers[rowIndex][colIndex]\n                        : manualPencilMarks[rowIndex][colIndex].map(mark => mark !== null ? mark : '').join(' ')\n                    }\n                    placeholder={cellValue !== '' ? cellValue : ''}\n                    maxLength={1}\n                    onChange={(e) => handleCellChange(e, rowIndex, colIndex)}\n                    readOnly={isOriginalCell}\n                  />\n                )}\n\n                {showPencilMarks && cellValue === '' && (\n                  <div className=\"pencil-marks\">\n                    {pencilMarks[rowIndex][colIndex].map((mark) => (\n                      <span key={mark} className=\"pencil-mark\">\n                        {mark}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      ))}\n      <div className=\"color-picker-container\">\n        <input\n          type=\"color\"\n          value={selectedColor}\n          onChange={(e) => setSelectedColor(e.target.value)}\n          onClick={applyColorToCell}\n          className=\"color-picker-input\"\n        />\n      </div>\n      <button onClick={() => setManualPencilMode(!manualPencilMode)}>\n        {manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'}\n      </button>\n      <button onClick={handleGenerateMarksClick}>Generate Pencil Marks</button>\n      <button onClick={handleAutoGenerateClick}>Auto Generate Puzzle</button>\n    </div>\n  );\n};\n\nexport default SudokuBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}