{"ast":null,"code":"var _jsxFileName = \"/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuCell.js\";\nimport React from 'react';\nimport { IconButton, Grid } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowLeftIcon from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ComparisonSudokuCell = _ref => {\n  let {\n    cellData,\n    adjacentBorders,\n    handleCellClick,\n    manualPencilMode,\n    manualPencilColors,\n    manualPencilMarks,\n    handlePencilMarksChange,\n    handleCellChange,\n    showPencilMarks,\n    isOriginalCell,\n    isUserCell,\n    pencilMarks,\n    selectedColor\n  } = _ref;\n  const {\n    value,\n    symbol\n  } = cellData;\n  const getArrowDirection = (border, symbol) => {\n    // Determine arrow direction based on border and inequalities\n    if (border === 'up' && symbol === '^') {\n      return 'up';\n    } else if (border === 'down' && symbol === 'v') {\n      return 'down';\n    } else if (border === 'left' && symbol === '<') {\n      return 'left';\n    } else if (border === 'right' && symbol === '>') {\n      return 'right';\n    }\n    return 'none'; // Default value when no arrow should be shown\n  };\n\n  const getArrowIconRotation = (symbol, border) => {\n    // Determine rotation of arrow icon based on symbol and border\n    // Return rotation angle in degrees\n    // ...\n\n    return 'rotate(0deg)'; // Example default value, replace with your logic\n  };\n\n  const renderArrowIcon = border => {\n    if (adjacentBorders.includes(border) && symbol) {\n      const arrowDirection = getArrowDirection(border);\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `arrow-icon ${arrowDirection}`,\n        style: {\n          transform: getArrowIconRotation(symbol, border)\n        },\n        children: [arrowDirection === 'up' && /*#__PURE__*/_jsxDEV(KeyboardArrowUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 39\n        }, this), arrowDirection === 'down' && /*#__PURE__*/_jsxDEV(KeyboardArrowDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 41\n        }, this), arrowDirection === 'left' && /*#__PURE__*/_jsxDEV(KeyboardArrowLeftIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 41\n        }, this), arrowDirection === 'right' && /*#__PURE__*/_jsxDEV(KeyboardArrowRightIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`,\n    onClick: handleCellClick,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pencil-marks\",\n      children: manualPencilMode && manualPencilMarks.length > 0 && manualPencilMarks.map((marks, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pencil-mark\",\n        style: {\n          color: manualPencilColors[index]\n        },\n        children: marks.join(' ')\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"arrow-icons-container\",\n      children: [renderArrowIcon('up'), renderArrowIcon('down'), renderArrowIcon('left'), renderArrowIcon('right')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_c = ComparisonSudokuCell;\nexport default ComparisonSudokuCell;\nvar _c;\n$RefreshReg$(_c, \"ComparisonSudokuCell\");","map":{"version":3,"names":["React","IconButton","Grid","KeyboardArrowDownIcon","KeyboardArrowLeftIcon","KeyboardArrowRightIcon","KeyboardArrowUpIcon","jsxDEV","_jsxDEV","ComparisonSudokuCell","_ref","cellData","adjacentBorders","handleCellClick","manualPencilMode","manualPencilColors","manualPencilMarks","handlePencilMarksChange","handleCellChange","showPencilMarks","isOriginalCell","isUserCell","pencilMarks","selectedColor","value","symbol","getArrowDirection","border","getArrowIconRotation","renderArrowIcon","includes","arrowDirection","className","style","transform","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","marks","index","color","join","container","direction","_c","$RefreshReg$"],"sources":["/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuCell.js"],"sourcesContent":["import React from 'react';\nimport { IconButton, Grid } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowLeftIcon from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n\nconst ComparisonSudokuCell = ({\n  cellData,\n  adjacentBorders,\n  handleCellClick,\n  manualPencilMode,\n  manualPencilColors,\n  manualPencilMarks,\n  handlePencilMarksChange,\n  handleCellChange,\n  showPencilMarks,\n  isOriginalCell,\n  isUserCell,\n  pencilMarks,\n  selectedColor,\n}) => {\n  const { value, symbol } = cellData;\n\n  const getArrowDirection = (border, symbol) => {\n    // Determine arrow direction based on border and inequalities\n    if (border === 'up' && symbol === '^') {\n      return 'up';\n    } else if (border === 'down' && symbol === 'v') {\n      return 'down';\n    } else if (border === 'left' && symbol === '<') {\n      return 'left';\n    } else if (border === 'right' && symbol === '>') {\n      return 'right';\n    }\n    \n    return 'none'; // Default value when no arrow should be shown\n  };\n  \n\n  const getArrowIconRotation = (symbol, border) => {\n    // Determine rotation of arrow icon based on symbol and border\n    // Return rotation angle in degrees\n    // ...\n\n    return 'rotate(0deg)'; // Example default value, replace with your logic\n  };\n\n  const renderArrowIcon = (border) => {\n    if (adjacentBorders.includes(border) && symbol) {\n      const arrowDirection = getArrowDirection(border);\n      return (\n        <span\n          className={`arrow-icon ${arrowDirection}`}\n          style={{\n            transform: getArrowIconRotation(symbol, border),\n          }}\n        >\n          {arrowDirection === 'up' && <KeyboardArrowUpIcon />}\n          {arrowDirection === 'down' && <KeyboardArrowDownIcon />}\n          {arrowDirection === 'left' && <KeyboardArrowLeftIcon />}\n          {arrowDirection === 'right' && <KeyboardArrowRightIcon />}\n        </span>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className={`sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`} onClick={handleCellClick}>\n      <div className=\"pencil-marks\">\n        {manualPencilMode &&\n          manualPencilMarks.length > 0 &&\n          manualPencilMarks.map((marks, index) => (\n            <span key={index} className=\"pencil-mark\" style={{ color: manualPencilColors[index] }}>\n              {marks.join(' ')}\n            </span>\n          ))}\n      </div>\n\n      <div className=\"arrow-icons-container\">\n        {renderArrowIcon('up')}\n        {renderArrowIcon('down')}\n        {renderArrowIcon('left')}\n        {renderArrowIcon('right')}\n      </div>\n\n      <Grid container direction=\"column\">\n        {/* Rest of your existing code */}\n      </Grid>\n    </div>\n  );\n};\n\nexport default ComparisonSudokuCell;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}