{"ast":null,"code":"var _jsxFileName = \"/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport ComparisonSudokuCell from './ComparisonSudokuCell';\nimport { updatePencilMarks, usePencilMarks } from './PencilMarking';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ComparisonSudokuBoard = () => {\n  _s();\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const [userAnswers, setUserAnswers] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const {\n    pencilMarks,\n    setPencilMarks,\n    showPencilMarks,\n    setShowPencilMarks,\n    handleGenerateMarksClick\n  } = usePencilMarks();\n  const [manualPencilMarks, setManualPencilMarks] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => [])));\n  const [manualPencilMode, setManualPencilMode] = useState(false);\n  const [activeCell, setActiveCell] = useState(null);\n  const [manualPencilColors, setManualPencilColors] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const [selectedColor, setSelectedColor] = useState('#000000');\n\n  // ... (rest of the functions)\n  // ... (rest of the functions)\n\n  const applyColorToCell = (rowIndex, colIndex) => {\n    if (manualPencilColors[rowIndex] && manualPencilColors[rowIndex][colIndex]) {\n      const newManualPencilColors = [...manualPencilColors];\n      newManualPencilColors[rowIndex][colIndex] = selectedColor;\n      setManualPencilColors(newManualPencilColors);\n    }\n  };\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (manualPencilMode) {\n      const clickedCellValue = manualPencilMarks[rowIndex][colIndex];\n      if (clickedCellValue === '') {\n        const newPencilMarks = [...manualPencilMarks];\n        newPencilMarks[rowIndex][colIndex] = [];\n        setManualPencilMarks(newPencilMarks);\n      }\n      setActiveCell(`${rowIndex}-${colIndex}`);\n    }\n  };\n  const handlePencilMarksChange = (e, rowIndex, colIndex) => {\n    const {\n      value\n    } = e.target;\n    const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n    const isGeneratedCell = generatedPuzzle[rowIndex][colIndex] !== '';\n    if (activeCell !== null && manualPencilMode && !isUserCell && !isGeneratedCell) {\n      const newManualPencilMarks = [...manualPencilMarks];\n      const newManualPencilColors = [...manualPencilColors];\n      const newMarks = value.split('').filter(char => /\\d/.test(char)).map(mark => parseInt(mark, 10));\n      newManualPencilMarks[rowIndex][colIndex] = newMarks;\n      newManualPencilColors[rowIndex][colIndex] = selectedColor;\n      setManualPencilColors(newManualPencilColors);\n      setManualPencilMarks(newManualPencilMarks);\n      console.log(`Manual Pencil Marks for Cell [${rowIndex}][${colIndex}]:`, newMarks);\n    }\n  };\n  const handleCellChange = (e, rowIndex, colIndex) => {\n    const {\n      value\n    } = e.target;\n    if (!manualPencilMode && (value === '' || /^[1-9]$/.test(value))) {\n      const newUserAnswers = [...userAnswers];\n      newUserAnswers[rowIndex][colIndex] = value === '' ? '' : parseInt(value, 10);\n      setUserAnswers(newUserAnswers);\n      const updatedPencilMarks = updatePencilMarks(newUserAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  };\n\n  // ... (rest of the functions)\n\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-board\",\n    children: [generatedPuzzle.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-row\",\n      children: row.map((cellData, colIndex) => {\n        const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n        const isOriginalCell = generatedPuzzle[rowIndex][colIndex] !== '';\n        const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n        const adjacentBorders = [];\n        if (rowIndex > 0 && row[rowIndex - 1].value && row[rowIndex - 1].symbol) {\n          adjacentBorders.push('up');\n        }\n        if (rowIndex < 8 && row[rowIndex + 1].value && row[rowIndex + 1].symbol) {\n          adjacentBorders.push('down');\n        }\n        if (colIndex > 0 && row[colIndex - 1].value && row[colIndex - 1].symbol) {\n          adjacentBorders.push('left');\n        }\n        if (colIndex < 8 && row[colIndex + 1].value && row[colIndex + 1].symbol) {\n          adjacentBorders.push('right');\n        }\n        return /*#__PURE__*/_jsxDEV(ComparisonSudokuCell, {\n          cellData: cellData,\n          adjacentBorders: adjacentBorders,\n          subgridIndex: subgridIndex,\n          manualPencilMode: manualPencilMode,\n          manualPencilColors: manualPencilColors,\n          manualPencilMarks: manualPencilMarks,\n          handleCellClick: () => handleCellClick(rowIndex, colIndex),\n          handlePencilMarksChange: e => handlePencilMarksChange(e, rowIndex, colIndex),\n          handleCellChange: e => handleCellChange(e, rowIndex, colIndex),\n          showPencilMarks: showPencilMarks,\n          isOriginalCell: isOriginalCell,\n          isUserCell: isUserCell,\n          pencilMarks: pencilMarks[rowIndex][colIndex],\n          generatedCellValue: generatedPuzzle[rowIndex][colIndex],\n          selectedColor: selectedColor,\n          applyColorToCell: () => applyColorToCell(rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-picker-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: selectedColor,\n        onChange: e => setSelectedColor(e.target.value),\n        onClick: applyColorToCell,\n        className: \"color-picker-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setManualPencilMode(!manualPencilMode),\n      children: manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateMarksClick,\n      children: \"Generate Pencil Marks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAutoGenerateClick,\n      children: \"Auto Generate Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(ComparisonSudokuBoard, \"uBiE+UiLNd3BHpunyqbmcMJrf3g=\", false, function () {\n  return [usePencilMarks];\n});\n_c = ComparisonSudokuBoard;\nexport default ComparisonSudokuBoard;\nvar _c;\n$RefreshReg$(_c, \"ComparisonSudokuBoard\");","map":{"version":3,"names":["React","useState","useEffect","ComparisonSudokuCell","updatePencilMarks","usePencilMarks","jsxDEV","_jsxDEV","ComparisonSudokuBoard","_s","generatedPuzzle","setGeneratedPuzzle","Array","from","length","userAnswers","setUserAnswers","pencilMarks","setPencilMarks","showPencilMarks","setShowPencilMarks","handleGenerateMarksClick","manualPencilMarks","setManualPencilMarks","manualPencilMode","setManualPencilMode","activeCell","setActiveCell","manualPencilColors","setManualPencilColors","selectedColor","setSelectedColor","applyColorToCell","rowIndex","colIndex","newManualPencilColors","handleCellClick","clickedCellValue","newPencilMarks","handlePencilMarksChange","e","value","target","isUserCell","isGeneratedCell","newManualPencilMarks","newMarks","split","filter","char","test","map","mark","parseInt","console","log","handleCellChange","newUserAnswers","updatedPencilMarks","className","children","row","cellData","subgridIndex","getSubgridIndex","isOriginalCell","adjacentBorders","symbol","push","generatedCellValue","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","handleAutoGenerateClick","_c","$RefreshReg$"],"sources":["/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport ComparisonSudokuCell from './ComparisonSudokuCell';\nimport { updatePencilMarks, usePencilMarks } from './PencilMarking';\n\nconst ComparisonSudokuBoard = () => {\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const [userAnswers, setUserAnswers] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const { pencilMarks, setPencilMarks, showPencilMarks, setShowPencilMarks, handleGenerateMarksClick } = usePencilMarks();\n  const [manualPencilMarks, setManualPencilMarks] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => [])));\n  const [manualPencilMode, setManualPencilMode] = useState(false);\n  const [activeCell, setActiveCell] = useState(null);\n  const [manualPencilColors, setManualPencilColors] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const [selectedColor, setSelectedColor] = useState('#000000');\n\n  // ... (rest of the functions)\n  // ... (rest of the functions)\n\nconst applyColorToCell = (rowIndex, colIndex) => {\n  if (manualPencilColors[rowIndex] && manualPencilColors[rowIndex][colIndex]) {\n    const newManualPencilColors = [...manualPencilColors];\n    newManualPencilColors[rowIndex][colIndex] = selectedColor;\n    setManualPencilColors(newManualPencilColors);\n  }\n};\n\nconst handleCellClick = (rowIndex, colIndex) => {\n  if (manualPencilMode) {\n    const clickedCellValue = manualPencilMarks[rowIndex][colIndex];\n    if (clickedCellValue === '') {\n      const newPencilMarks = [...manualPencilMarks];\n      newPencilMarks[rowIndex][colIndex] = [];\n      setManualPencilMarks(newPencilMarks);\n    }\n    setActiveCell(`${rowIndex}-${colIndex}`);\n  }\n};\n\nconst handlePencilMarksChange = (e, rowIndex, colIndex) => {\n  const { value } = e.target;\n  const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n  const isGeneratedCell = generatedPuzzle[rowIndex][colIndex] !== '';\n\n  if (activeCell !== null && manualPencilMode && !isUserCell && !isGeneratedCell) {\n    const newManualPencilMarks = [...manualPencilMarks];\n    const newManualPencilColors = [...manualPencilColors];\n\n    const newMarks = value.split('').filter(char => /\\d/.test(char)).map(mark => parseInt(mark, 10));\n\n    newManualPencilMarks[rowIndex][colIndex] = newMarks;\n    newManualPencilColors[rowIndex][colIndex] = selectedColor;\n    setManualPencilColors(newManualPencilColors);\n    setManualPencilMarks(newManualPencilMarks);\n\n    console.log(`Manual Pencil Marks for Cell [${rowIndex}][${colIndex}]:`, newMarks);\n  }\n};\n\nconst handleCellChange = (e, rowIndex, colIndex) => {\n  const { value } = e.target;\n  if (!manualPencilMode && (value === '' || /^[1-9]$/.test(value))) {\n    const newUserAnswers = [...userAnswers];\n    newUserAnswers[rowIndex][colIndex] = value === '' ? '' : parseInt(value, 10);\n    setUserAnswers(newUserAnswers);\n\n    const updatedPencilMarks = updatePencilMarks(newUserAnswers);\n    setPencilMarks(updatedPencilMarks);\n  }\n};\n\n// ... (rest of the functions)\n\n\n\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n\n  return (\n    <div className=\"sudoku-board\">\n      {generatedPuzzle.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"sudoku-row\">\n          {row.map((cellData, colIndex) => {\n            const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n            const isOriginalCell = generatedPuzzle[rowIndex][colIndex] !== '';\n            const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n\n            const adjacentBorders = [];\n\n            if (rowIndex > 0 && row[rowIndex - 1].value && row[rowIndex - 1].symbol) {\n              adjacentBorders.push('up');\n            }\n            if (rowIndex < 8 && row[rowIndex + 1].value && row[rowIndex + 1].symbol) {\n              adjacentBorders.push('down');\n            }\n            if (colIndex > 0 && row[colIndex - 1].value && row[colIndex - 1].symbol) {\n              adjacentBorders.push('left');\n            }\n            if (colIndex < 8 && row[colIndex + 1].value && row[colIndex + 1].symbol) {\n              adjacentBorders.push('right');\n            }\n\n            return (\n              <ComparisonSudokuCell\n                key={colIndex}\n                cellData={cellData}\n                adjacentBorders={adjacentBorders}\n                subgridIndex={subgridIndex}\n                manualPencilMode={manualPencilMode}\n                manualPencilColors={manualPencilColors}\n                manualPencilMarks={manualPencilMarks}\n                handleCellClick={() => handleCellClick(rowIndex, colIndex)}\n                handlePencilMarksChange={(e) => handlePencilMarksChange(e, rowIndex, colIndex)}\n                handleCellChange={(e) => handleCellChange(e, rowIndex, colIndex)}\n                showPencilMarks={showPencilMarks}\n                isOriginalCell={isOriginalCell}\n                isUserCell={isUserCell}\n                pencilMarks={pencilMarks[rowIndex][colIndex]}\n                generatedCellValue={generatedPuzzle[rowIndex][colIndex]}\n                selectedColor={selectedColor}\n                applyColorToCell={() => applyColorToCell(rowIndex, colIndex)}\n              />\n            );\n          })}\n        </div>\n      ))}\n      <div className=\"color-picker-container\">\n        <input\n          type=\"color\"\n          value={selectedColor}\n          onChange={(e) => setSelectedColor(e.target.value)}\n          onClick={applyColorToCell}\n          className=\"color-picker-input\"\n        />\n      </div>\n      <button onClick={() => setManualPencilMode(!manualPencilMode)}>\n        {manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'}\n      </button>\n      <button onClick={handleGenerateMarksClick}>Generate Pencil Marks</button>\n      <button onClick={handleAutoGenerateClick}>Auto Generate Puzzle</button>\n    </div>\n  );\n};\n\nexport default ComparisonSudokuBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}