{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\n// Function to generate pencil marks for an empty cell\nexport function generatePencilMarks(board, row, col) {\n  if (board[row][col] !== '') {\n    return [];\n  }\n  const marks = new Set(Array.from({\n    length: 9\n  }, (_, index) => index + 1));\n\n  // Check row\n  for (let i = 0; i < 9; i++) {\n    marks.delete(parseInt(board[row][i]));\n  }\n\n  // Check column\n  for (let i = 0; i < 9; i++) {\n    marks.delete(parseInt(board[i][col]));\n  }\n\n  // Check 3x3 subgrid\n  const startRow = Math.floor(row / 3) * 3;\n  const startCol = Math.floor(col / 3) * 3;\n  for (let i = startRow; i < startRow + 3; i++) {\n    for (let j = startCol; j < startCol + 3; j++) {\n      marks.delete(parseInt(board[i][j]));\n    }\n  }\n  return Array.from(marks);\n}\n\n// Function to update pencil marks for all empty cells\nexport function updatePencilMarks(board) {\n  return board.map((row, rowIndex) => row.map((cellValue, colIndex) => {\n    if (cellValue === '') {\n      return generatePencilMarks(board, rowIndex, colIndex);\n    }\n    return [];\n  }));\n}\nexport const usePencilMarks = () => {\n  _s();\n  const [pencilMarks, setPencilMarks] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => [])));\n  const [showPencilMarks, setShowPencilMarks] = useState(false);\n  const handleGenerateMarksClick = () => {\n    setShowPencilMarks(prevShowPencilMarks => !prevShowPencilMarks); // Toggle the showPencilMarks state\n  };\n\n  return {\n    pencilMarks,\n    setPencilMarks,\n    showPencilMarks,\n    setShowPencilMarks,\n    handleGenerateMarksClick\n  };\n};\n_s(usePencilMarks, \"hF7P+s1qu1xxEmKaA7lqnWv/4rk=\");","map":{"version":3,"names":["useState","generatePencilMarks","board","row","col","marks","Set","Array","from","length","_","index","i","delete","parseInt","startRow","Math","floor","startCol","j","updatePencilMarks","map","rowIndex","cellValue","colIndex","usePencilMarks","_s","pencilMarks","setPencilMarks","showPencilMarks","setShowPencilMarks","handleGenerateMarksClick","prevShowPencilMarks"],"sources":["/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/Pencil-Marking/PencilMarking.js"],"sourcesContent":["import { useState } from 'react';\n// Function to generate pencil marks for an empty cell\nexport function generatePencilMarks(board, row, col) {\n    if (board[row][col] !== '') {\n      return [];\n    }\n  \n    const marks = new Set(Array.from({ length: 9 }, (_, index) => index + 1));\n  \n    // Check row\n    for (let i = 0; i < 9; i++) {\n      marks.delete(parseInt(board[row][i]));\n    }\n  \n    // Check column\n    for (let i = 0; i < 9; i++) {\n      marks.delete(parseInt(board[i][col]));\n    }\n  \n    // Check 3x3 subgrid\n    const startRow = Math.floor(row / 3) * 3;\n    const startCol = Math.floor(col / 3) * 3;\n    for (let i = startRow; i < startRow + 3; i++) {\n      for (let j = startCol; j < startCol + 3; j++) {\n        marks.delete(parseInt(board[i][j]));\n      }\n    }\n  \n    return Array.from(marks);\n  }\n  \n// Function to update pencil marks for all empty cells\nexport function updatePencilMarks(board) {\n    return board.map((row, rowIndex) =>\n        row.map((cellValue, colIndex) => {\n            if (cellValue === '') {\n                return generatePencilMarks(board, rowIndex, colIndex);\n            }\n            return [];\n        })\n    );\n}\n\nexport const usePencilMarks = () => {\n  const [pencilMarks, setPencilMarks] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => [])));\n  const [showPencilMarks, setShowPencilMarks] = useState(false);\n\n  const handleGenerateMarksClick = () => {\n    setShowPencilMarks((prevShowPencilMarks) => !prevShowPencilMarks); // Toggle the showPencilMarks state\n  };\n\n  return {\n    pencilMarks,\n    setPencilMarks,\n    showPencilMarks,\n    setShowPencilMarks,\n    handleGenerateMarksClick,\n  };\n};\n  "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC;AACA,OAAO,SAASC,mBAAmBA,CAACC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAE;EACjD,IAAIF,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,EAAE,EAAE;IAC1B,OAAO,EAAE;EACX;EAEA,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAACC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC,CAAC;;EAEzE;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BP,KAAK,CAACQ,MAAM,CAACC,QAAQ,CAACZ,KAAK,CAACC,GAAG,CAAC,CAACS,CAAC,CAAC,CAAC,CAAC;EACvC;;EAEA;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BP,KAAK,CAACQ,MAAM,CAACC,QAAQ,CAACZ,KAAK,CAACU,CAAC,CAAC,CAACR,GAAG,CAAC,CAAC,CAAC;EACvC;;EAEA;EACA,MAAMW,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACd,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;EACxC,MAAMe,QAAQ,GAAGF,IAAI,CAACC,KAAK,CAACb,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;EACxC,KAAK,IAAIQ,CAAC,GAAGG,QAAQ,EAAEH,CAAC,GAAGG,QAAQ,GAAG,CAAC,EAAEH,CAAC,EAAE,EAAE;IAC5C,KAAK,IAAIO,CAAC,GAAGD,QAAQ,EAAEC,CAAC,GAAGD,QAAQ,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;MAC5Cd,KAAK,CAACQ,MAAM,CAACC,QAAQ,CAACZ,KAAK,CAACU,CAAC,CAAC,CAACO,CAAC,CAAC,CAAC,CAAC;IACrC;EACF;EAEA,OAAOZ,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC;AAC1B;;AAEF;AACA,OAAO,SAASe,iBAAiBA,CAAClB,KAAK,EAAE;EACrC,OAAOA,KAAK,CAACmB,GAAG,CAAC,CAAClB,GAAG,EAAEmB,QAAQ,KAC3BnB,GAAG,CAACkB,GAAG,CAAC,CAACE,SAAS,EAAEC,QAAQ,KAAK;IAC7B,IAAID,SAAS,KAAK,EAAE,EAAE;MAClB,OAAOtB,mBAAmB,CAACC,KAAK,EAAEoB,QAAQ,EAAEE,QAAQ,CAAC;IACzD;IACA,OAAO,EAAE;EACb,CAAC,CACL,CAAC;AACL;AAEA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAACO,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,MAAMF,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;EACpH,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAM+B,wBAAwB,GAAGA,CAAA,KAAM;IACrCD,kBAAkB,CAAEE,mBAAmB,IAAK,CAACA,mBAAmB,CAAC,CAAC,CAAC;EACrE,CAAC;;EAED,OAAO;IACLL,WAAW;IACXC,cAAc;IACdC,eAAe;IACfC,kBAAkB;IAClBC;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CAfWD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}