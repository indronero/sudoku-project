{"ast":null,"code":"var _jsxFileName = \"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/SudokuGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport { updatePencilMarks, usePencilMarks } from './Pencil-Marking/PencilMarking';\nimport { generateRandomSudokuPuzzle } from './PuzzleGeneration';\nimport useManualPencilMarking from './Pencil-Marking/ManualPencilMarking';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SudokuBoard = () => {\n  _s();\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const [userAnswers, setUserAnswers] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const {\n    pencilMarks,\n    setPencilMarks,\n    showPencilMarks,\n    setShowPencilMarks,\n    handleGenerateMarksClick\n  } = usePencilMarks();\n  const {\n    manualPencilMarks,\n    setManualPencilMarks,\n    manualPencilMode,\n    setManualPencilMode,\n    setActiveCell,\n    handlePencilMarksChange,\n    applyColorToCell,\n    selectedColor,\n    setSelectedColor,\n    manualPencilColors\n  } = useManualPencilMarking(userAnswers, generatedPuzzle);\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (manualPencilMode) {\n      const clickedCellValue = manualPencilMarks[rowIndex][colIndex];\n      if (clickedCellValue === '') {\n        const newPencilMarks = [...manualPencilMarks];\n        newPencilMarks[rowIndex][colIndex] = [];\n        setManualPencilMarks(newPencilMarks);\n      }\n      setActiveCell(`${rowIndex}-${colIndex}`);\n    }\n  };\n  const handleCellChange = (e, rowIndex, colIndex) => {\n    const {\n      value\n    } = e.target;\n    if (value === '' || /^[1-9]$/.test(value)) {\n      const newUserAnswers = [...userAnswers];\n      newUserAnswers[rowIndex][colIndex] = value === '' ? '' : parseInt(value, 10);\n      setUserAnswers(newUserAnswers);\n      console.log('Updated userAnswers:', newUserAnswers);\n\n      // Generate and update pencil marks for the entire board\n      const updatedPencilMarks = updatePencilMarks(newUserAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  };\n  const handleAutoGenerateClick = () => {\n    const puzzleString = generateRandomSudokuPuzzle();\n\n    // Clear the userAnswers and manualPencilMarks array and generatedPuzzle\n    setUserAnswers(Array.from({\n      length: 9\n    }, () => Array.from({\n      length: 9\n    }, () => '')));\n    setManualPencilMarks(Array.from({\n      length: 9\n    }, () => Array.from({\n      length: 9\n    }, () => [])));\n    setGeneratedPuzzle(Array.from({\n      length: 9\n    }, () => Array.from({\n      length: 9\n    }, () => '')));\n    const generatedPuzzle = puzzleString.match(/.{9}/g).map(row => row.split('').map(cell => cell === '0' ? '' : cell)); // Convert '0' to empty string\n\n    setGeneratedPuzzle(generatedPuzzle);\n    const updatedPencilMarks = updatePencilMarks(generatedPuzzle);\n    setPencilMarks(updatedPencilMarks);\n    setShowPencilMarks(false);\n  };\n\n  /*const handleAutoGenerateClick = async () => {\n    try {\n      // Clear the userAnswers array\n      setUserAnswers(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n      // Make an API call to fetch the Sudoku puzzle\n      const response = await fetch('https://sudoku-api.vercel.app/api/dosuku'); // Replace 'YOUR_API_URL' with the actual API endpoint\n      if (!response.ok) {\n        throw new Error('Failed to fetch the Sudoku puzzle. Please check the API endpoint or try again later.');\n      }\n       // Parse the response and extract the 9x9 grid array\n      const data = await response.json();\n      const gridArray = data.newboard.grids[0].value;\n       // Convert the grid array to the format expected by the board state\n      const newGeneratedPuzzle = gridArray.map(row => row.map(value => (value === 0 ? '' : value)));\n       // Set the generated puzzle to the state\n      setGeneratedPuzzle(newGeneratedPuzzle);\n       // Generate and update pencil marks for the entire board\n      const updatedPencilMarks = updatePencilMarks(newGeneratedPuzzle);\n      setPencilMarks(updatedPencilMarks);\n       // Set the state to show pencil marks and hide manual entry mode\n      setShowPencilMarks(false);\n      console.log('Updated generatedPuzzle:', newGeneratedPuzzle);\n      console.log('Cleared userAnswers:', userAnswers);\n     } catch (error) {\n      console.error('Error fetching the Sudoku puzzle:', error.message);\n      // Handle error (e.g., show an error message to the user)\n    }\n  };*/\n\n  const getSubgridIndex = (rowIndex, colIndex) => {\n    const subgridRow = Math.floor(rowIndex / 3);\n    const subgridCol = Math.floor(colIndex / 3);\n    return subgridRow * 3 + subgridCol;\n  };\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-board\",\n    children: [generatedPuzzle.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-row\",\n      children: row.map((cellValue, colIndex) => {\n        const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n        const isOriginalCell = generatedPuzzle[rowIndex][colIndex] !== '';\n        const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: [manualPencilMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `manual-pencil-container ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: `cell-${rowIndex}-${colIndex}`,\n              type: \"text\",\n              className: `sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex] !== '' ? 'generated-cell' : ''} ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`\n              //style={{color: '#33A7FF'}}\n              ,\n              value: userAnswers[rowIndex][colIndex] !== '' ? userAnswers[rowIndex][colIndex] : generatedPuzzle[rowIndex][colIndex] !== '' ? generatedPuzzle[rowIndex][colIndex] : manualPencilMarks[rowIndex][colIndex].map(mark => mark !== null ? mark : '').join(' '),\n              placeholder: \"\",\n              onChange: e => handlePencilMarksChange(e, rowIndex, colIndex),\n              readOnly: isOriginalCell && isUserCell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 23\n            }, this), manualPencilMarks[rowIndex][colIndex].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"manual-pencil-mark-text\",\n              style: {\n                color: manualPencilColors[rowIndex][colIndex]\n              },\n              children: manualPencilMarks[rowIndex][colIndex].map((mark, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"manual-pencil-mark\",\n                children: mark !== null ? mark : ''\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `manual-pencil-container ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: `cell-${rowIndex}-${colIndex}`,\n              type: \"text\",\n              className: `sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex] !== '' ? 'generated-cell' : ''} ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`\n              //style={{ color: manualPencilColors[rowIndex][colIndex] }}\n              ,\n              value: !manualPencilMode ? userAnswers[rowIndex][colIndex] : '',\n              placeholder: cellValue !== '' ? cellValue : '',\n              maxLength: 1,\n              onInput: e => handleCellChange(e, rowIndex, colIndex),\n              readOnly: isOriginalCell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 27\n            }, this), manualPencilMarks[rowIndex][colIndex].length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"manual-pencil-mark-text\",\n              style: {\n                color: manualPencilColors[rowIndex][colIndex]\n              },\n              children: manualPencilMarks[rowIndex][colIndex].map((mark, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"manual-pencil-mark\",\n                children: mark !== null ? mark : ''\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 35\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this), showPencilMarks && cellValue === '' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pencil-marks\",\n            children: pencilMarks[rowIndex][colIndex].map(mark => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"pencil-mark\",\n              children: mark\n            }, mark, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 19\n          }, this)]\n        }, colIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-picker-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: selectedColor,\n        onChange: e => setSelectedColor(e.target.value),\n        onClick: applyColorToCell,\n        className: \"color-picker-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setManualPencilMode(!manualPencilMode),\n      children: manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateMarksClick,\n      children: \"Generate Pencil Marks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAutoGenerateClick,\n      children: \"Auto Generate Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuBoard, \"U9dLscXXsW+FvmKHDQtjhl4CTMY=\", false, function () {\n  return [usePencilMarks, useManualPencilMarking];\n});\n_c = SudokuBoard;\nexport default SudokuBoard;\nvar _c;\n$RefreshReg$(_c, \"SudokuBoard\");","map":{"version":3,"names":["React","useState","useEffect","updatePencilMarks","usePencilMarks","generateRandomSudokuPuzzle","useManualPencilMarking","jsxDEV","_jsxDEV","SudokuBoard","_s","generatedPuzzle","setGeneratedPuzzle","Array","from","length","userAnswers","setUserAnswers","pencilMarks","setPencilMarks","showPencilMarks","setShowPencilMarks","handleGenerateMarksClick","manualPencilMarks","setManualPencilMarks","manualPencilMode","setManualPencilMode","setActiveCell","handlePencilMarksChange","applyColorToCell","selectedColor","setSelectedColor","manualPencilColors","handleCellClick","rowIndex","colIndex","clickedCellValue","newPencilMarks","handleCellChange","e","value","target","test","newUserAnswers","parseInt","console","log","updatedPencilMarks","handleAutoGenerateClick","puzzleString","match","map","row","split","cell","getSubgridIndex","subgridRow","Math","floor","subgridCol","className","children","cellValue","subgridIndex","isOriginalCell","isUserCell","onClick","id","type","mark","join","placeholder","onChange","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","style","color","index","maxLength","onInput","_c","$RefreshReg$"],"sources":["/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/SudokuGrid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport { updatePencilMarks, usePencilMarks } from './Pencil-Marking/PencilMarking';\nimport { generateRandomSudokuPuzzle } from './PuzzleGeneration';\nimport useManualPencilMarking from './Pencil-Marking/ManualPencilMarking';\n\n\nconst SudokuBoard = () => {\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const [userAnswers, setUserAnswers] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const { pencilMarks, setPencilMarks, showPencilMarks, setShowPencilMarks, handleGenerateMarksClick } = usePencilMarks();\n  const {manualPencilMarks, setManualPencilMarks, manualPencilMode, setManualPencilMode, setActiveCell, handlePencilMarksChange, applyColorToCell, selectedColor, setSelectedColor,manualPencilColors } = useManualPencilMarking(userAnswers, generatedPuzzle);\n\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (manualPencilMode) {\n      const clickedCellValue = manualPencilMarks[rowIndex][colIndex];\n      if (clickedCellValue === '') {\n        const newPencilMarks = [...manualPencilMarks];\n        newPencilMarks[rowIndex][colIndex] = [];\n        setManualPencilMarks(newPencilMarks);\n      }\n      setActiveCell(`${rowIndex}-${colIndex}`);\n    }\n  };\n\n  const handleCellChange = (e, rowIndex, colIndex) => {\n    const { value } = e.target;\n    if (value === '' || /^[1-9]$/.test(value)) {\n      const newUserAnswers = [...userAnswers];\n      newUserAnswers[rowIndex][colIndex] = value === '' ? '' : parseInt(value, 10);\n      setUserAnswers(newUserAnswers);\n      console.log('Updated userAnswers:', newUserAnswers);\n  \n      // Generate and update pencil marks for the entire board\n      const updatedPencilMarks = updatePencilMarks(newUserAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  };\n  \n\n  const handleAutoGenerateClick = () => {\n    const puzzleString = generateRandomSudokuPuzzle();\n    \n    // Clear the userAnswers and manualPencilMarks array and generatedPuzzle\n    setUserAnswers(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n    setManualPencilMarks(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => [])));\n\n    setGeneratedPuzzle(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  \n    const generatedPuzzle = puzzleString\n      .match(/.{9}/g)\n      .map(row => row.split('').map(cell => (cell === '0' ? '' : cell))); // Convert '0' to empty string\n  \n    setGeneratedPuzzle(generatedPuzzle);\n  \n    const updatedPencilMarks = updatePencilMarks(generatedPuzzle);\n    setPencilMarks(updatedPencilMarks);\n    setShowPencilMarks(false);\n  };  \n\n  /*const handleAutoGenerateClick = async () => {\n    try {\n      // Clear the userAnswers array\n      setUserAnswers(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n      // Make an API call to fetch the Sudoku puzzle\n      const response = await fetch('https://sudoku-api.vercel.app/api/dosuku'); // Replace 'YOUR_API_URL' with the actual API endpoint\n      if (!response.ok) {\n        throw new Error('Failed to fetch the Sudoku puzzle. Please check the API endpoint or try again later.');\n      }\n\n      // Parse the response and extract the 9x9 grid array\n      const data = await response.json();\n      const gridArray = data.newboard.grids[0].value;\n\n      // Convert the grid array to the format expected by the board state\n      const newGeneratedPuzzle = gridArray.map(row => row.map(value => (value === 0 ? '' : value)));\n\n      // Set the generated puzzle to the state\n      setGeneratedPuzzle(newGeneratedPuzzle);\n\n      // Generate and update pencil marks for the entire board\n      const updatedPencilMarks = updatePencilMarks(newGeneratedPuzzle);\n      setPencilMarks(updatedPencilMarks);\n\n      // Set the state to show pencil marks and hide manual entry mode\n      setShowPencilMarks(false);\n      console.log('Updated generatedPuzzle:', newGeneratedPuzzle);\n      console.log('Cleared userAnswers:', userAnswers);\n\n    } catch (error) {\n      console.error('Error fetching the Sudoku puzzle:', error.message);\n      // Handle error (e.g., show an error message to the user)\n    }\n  };*/\n\n  const getSubgridIndex = (rowIndex, colIndex) => {\n    const subgridRow = Math.floor(rowIndex / 3);\n    const subgridCol = Math.floor(colIndex / 3);\n    return subgridRow * 3 + subgridCol;\n  };\n  \n\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n\n  return (\n    <div className=\"sudoku-board\">\n      {generatedPuzzle.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"sudoku-row\">\n          {row.map((cellValue, colIndex) => {\n            const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n            const isOriginalCell = generatedPuzzle[rowIndex][colIndex] !== '';\n            const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n\n            return (\n              <div\n                key={colIndex}\n                className={`sudoku-cell-container ${isOriginalCell ? 'original-cell' : ''}`}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {manualPencilMode ? (\n                    <div className={`manual-pencil-container ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`}>\n                      <input\n                        id={`cell-${rowIndex}-${colIndex}`}\n                        type=\"text\"\n                        className={`sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex] !== '' ? 'generated-cell' : ''} ${\n                          manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''\n                        }`}                        \n                        //style={{color: '#33A7FF'}}\n                        value={\n                          userAnswers[rowIndex][colIndex] !== ''\n                            ? userAnswers[rowIndex][colIndex]\n                            : generatedPuzzle[rowIndex][colIndex] !== ''\n                              ? generatedPuzzle[rowIndex][colIndex]\n                              : manualPencilMarks[rowIndex][colIndex].map(mark => (mark !== null ? mark : '')).join(' ')\n                        }\n                        placeholder=\"\"\n                        onChange={(e) => handlePencilMarksChange(e, rowIndex, colIndex)}\n                        readOnly={isOriginalCell && isUserCell}\n                      />\n                      {manualPencilMarks[rowIndex][colIndex].length > 0 && (\n                        <div \n                        className=\"manual-pencil-mark-text\"\n                        style={{\n                          color: manualPencilColors[rowIndex][colIndex]\n                        }}\n                        >\n                          {manualPencilMarks[rowIndex][colIndex].map((mark, index) => (\n                            <span key={index} className=\"manual-pencil-mark\" >\n                              {mark !== null ? mark : ''}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                        <div className={`manual-pencil-container ${manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''}`}>\n                          <input\n                            id={`cell-${rowIndex}-${colIndex}`}\n                            type=\"text\"\n                            className={`sudoku-cell subgrid-${subgridIndex} ${generatedPuzzle[rowIndex][colIndex] !== '' ? 'generated-cell' : ''} ${\n                              manualPencilMarks[rowIndex][colIndex].length > 0 ? 'manual-pencil-mark' : ''\n                            }`}                  \n                            //style={{ color: manualPencilColors[rowIndex][colIndex] }}\n                            value={\n                              !manualPencilMode\n                                ? userAnswers[rowIndex][colIndex]\n                                : ''\n                            }\n                            placeholder={cellValue !== '' ? cellValue : ''}\n                            maxLength={1}\n                            onInput={(e) => handleCellChange(e, rowIndex, colIndex)}\n                            readOnly={isOriginalCell}\n                          />\n                            {manualPencilMarks[rowIndex][colIndex].length > 0 && (\n                              <div \n                              className=\"manual-pencil-mark-text\" \n                              style={{\n                                color: manualPencilColors[rowIndex][colIndex]\n                              }}\n                              >\n                                {manualPencilMarks[rowIndex][colIndex].map((mark, index) => (\n                                  <span key={index} className=\"manual-pencil-mark\">\n                                    {mark !== null ? mark : ''}\n                                  </span>\n                                ))}\n                              </div>\n                            )}\n                        </div>\n                      )\n              }\n                {showPencilMarks && cellValue === '' && (\n                  <div className=\"pencil-marks\">\n                    {pencilMarks[rowIndex][colIndex].map((mark) => (\n                      <span key={mark} className=\"pencil-mark\">\n                        {mark}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      ))}\n      <div className=\"color-picker-container\">\n        <input\n          type=\"color\"\n          value={selectedColor}\n          onChange={(e) => setSelectedColor(e.target.value)}\n          onClick={applyColorToCell}\n          className=\"color-picker-input\"\n        />\n      </div>\n      <button onClick={() => setManualPencilMode(!manualPencilMode)}>\n        {manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'}\n      </button>\n      <button onClick={handleGenerateMarksClick}>Generate Pencil Marks</button>\n      <button onClick={handleAutoGenerateClick}>Auto Generate Puzzle</button>\n    </div>\n  );\n};\n\nexport default SudokuBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}