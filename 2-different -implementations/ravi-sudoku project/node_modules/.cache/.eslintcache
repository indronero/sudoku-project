[{"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/index.js":"1","/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/App.js":"2","/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/reportWebVitals.js":"3","/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/SudokuGrid.js":"4","/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/PuzzleGeneration.js":"5","/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/Pencil-Marking/ManualPencilMarking.js":"6","/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/Pencil-Marking/PencilMarking.js":"7"},{"size":535,"mtime":1692323676000,"results":"8","hashOfConfig":"9"},{"size":281,"mtime":1692323676000,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1692323676000,"results":"11","hashOfConfig":"9"},{"size":7435,"mtime":1692394836026,"results":"12","hashOfConfig":"9"},{"size":3787,"mtime":1692378623784,"results":"13","hashOfConfig":"9"},{"size":2436,"mtime":1692323676000,"results":"14","hashOfConfig":"9"},{"size":1680,"mtime":1692323676000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1r6p8r6",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/index.js",[],[],[],"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/App.js",[],[],"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/reportWebVitals.js",[],[],"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/SudokuGrid.js",["39","40"],[],"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/PuzzleGeneration.js",[],[],"/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/Pencil-Marking/ManualPencilMarking.js",["41"],[],"import React, { useState } from 'react';\n\nconst useManualPencilMarking = (userAnswers, generatedPuzzle) => {  \nconst [manualPencilMarks, setManualPencilMarks] = useState(\n    Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => []))\n  );\n  const [manualPencilMode, setManualPencilMode] = useState(false);\n  const [activeCell, setActiveCell] = useState(null);\n\n  const [manualPencilColors, setManualPencilColors] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const [selectedColor, setSelectedColor] = useState('#11C2F2'); \n\n  const handlePencilMarksChange = (e, rowIndex, colIndex) => {\n    const { value } = e.target;\n    const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n    const isGeneratedCell = generatedPuzzle[rowIndex][colIndex] !== '';\n  \n    if (activeCell !== null && manualPencilMode && !isUserCell && !isGeneratedCell) {\n      const newManualPencilMarks = [...manualPencilMarks];\n      const newManualPencilColors = [...manualPencilColors]; \n  \n      // Parse the input value and filter out non-numeric characters\n      const newMarks = value.split('').filter(char => /\\d/.test(char)).map(mark => parseInt(mark, 10));\n  \n      // Update the manual pencil marks for the clicked cell\n      newManualPencilMarks[rowIndex][colIndex] = newMarks;\n  \n      // Set the color for the clicked cell using the selected color\n      newManualPencilColors[rowIndex][colIndex] = selectedColor;\n      setManualPencilColors(newManualPencilColors);\n  \n      // Update the state with the new manual pencil marks\n      setManualPencilMarks(newManualPencilMarks);\n  \n      // Log the manual pencil marks for the clicked cell\n      console.log(`Manual Pencil Marks for Cell [${rowIndex}][${colIndex}]:`, newMarks);\n    }\n  };  \n\n  const applyColorToCell = (rowIndex, colIndex) => {\n    if (manualPencilColors[rowIndex] && manualPencilColors[rowIndex][colIndex]) { // Check if the index exists\n      const newManualPencilColors = [...manualPencilColors];\n      newManualPencilColors[rowIndex][colIndex] = selectedColor;\n      setManualPencilColors(newManualPencilColors);\n    }\n  };\n\n  return {\n    manualPencilMarks,\n    setManualPencilMarks,\n    manualPencilMode,\n    setManualPencilMode,\n    activeCell,\n    setActiveCell,\n    handlePencilMarksChange,\n    applyColorToCell,\n    selectedColor,\n    setSelectedColor,\n    manualPencilColors \n  };\n};\n\nexport default useManualPencilMarking;\n","/Users/kumarprasad/Desktop/GitHub/ravi-sudoku project/src/Pencil-Marking/PencilMarking.js",[],[],{"ruleId":"42","severity":1,"message":"43","line":16,"column":106,"nodeType":"44","messageId":"45","endLine":16,"endColumn":129},{"ruleId":"42","severity":1,"message":"46","line":80,"column":19,"nodeType":"44","messageId":"45","endLine":80,"endColumn":29},{"ruleId":"42","severity":1,"message":"47","line":1,"column":8,"nodeType":"44","messageId":"45","endLine":1,"endColumn":13},"no-unused-vars","'handlePencilMarksChange' is assigned a value but never used.","Identifier","unusedVar","'isUserCell' is assigned a value but never used.","'React' is defined but never used."]