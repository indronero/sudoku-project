{"ast":null,"code":"var _jsxFileName = \"/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport ComparisonSudokuCell from './ComparisonSudokuCell';\nimport { updatePencilMarks, usePencilMarks } from './PencilMarking';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ComparisonSudokuBoard = () => {\n  _s();\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const [userAnswers, setUserAnswers] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const {\n    pencilMarks,\n    setPencilMarks,\n    showPencilMarks,\n    setShowPencilMarks,\n    handleGenerateMarksClick\n  } = usePencilMarks();\n  const [manualPencilMarks, setManualPencilMarks] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => [])));\n  const [manualPencilMode, setManualPencilMode] = useState(false);\n  const [activeCell, setActiveCell] = useState(null);\n  const [manualPencilColors, setManualPencilColors] = useState(Array.from({\n    length: 9\n  }, () => Array.from({\n    length: 9\n  }, () => '')));\n  const [selectedColor, setSelectedColor] = useState('#000000');\n\n  // ... (rest of the functions)\n\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-board\",\n    children: [generatedPuzzle.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-row\",\n      children: row.map((cellData, colIndex) => {\n        const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n        const isOriginalCell = generatedPuzzle[rowIndex][colIndex] !== '';\n        const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n        const adjacentBorders = [];\n        if (rowIndex > 0 && row[rowIndex - 1].value && row[rowIndex - 1].symbol) {\n          adjacentBorders.push('up');\n        }\n        if (rowIndex < 8 && row[rowIndex + 1].value && row[rowIndex + 1].symbol) {\n          adjacentBorders.push('down');\n        }\n        if (colIndex > 0 && row[colIndex - 1].value && row[colIndex - 1].symbol) {\n          adjacentBorders.push('left');\n        }\n        if (colIndex < 8 && row[colIndex + 1].value && row[colIndex + 1].symbol) {\n          adjacentBorders.push('right');\n        }\n        return /*#__PURE__*/_jsxDEV(ComparisonSudokuCell, {\n          cellData: cellData,\n          adjacentBorders: adjacentBorders,\n          subgridIndex: subgridIndex,\n          manualPencilMode: manualPencilMode,\n          manualPencilColors: manualPencilColors,\n          manualPencilMarks: manualPencilMarks,\n          handleCellClick: () => handleCellClick(rowIndex, colIndex),\n          handlePencilMarksChange: e => handlePencilMarksChange(e, rowIndex, colIndex),\n          handleCellChange: e => handleCellChange(e, rowIndex, colIndex),\n          showPencilMarks: showPencilMarks,\n          isOriginalCell: isOriginalCell,\n          isUserCell: isUserCell,\n          pencilMarks: pencilMarks[rowIndex][colIndex],\n          generatedCellValue: generatedPuzzle[rowIndex][colIndex],\n          selectedColor: selectedColor,\n          applyColorToCell: () => applyColorToCell(rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-picker-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: selectedColor,\n        onChange: e => setSelectedColor(e.target.value),\n        onClick: applyColorToCell,\n        className: \"color-picker-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setManualPencilMode(!manualPencilMode),\n      children: manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateMarksClick,\n      children: \"Generate Pencil Marks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAutoGenerateClick,\n      children: \"Auto Generate Puzzle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ComparisonSudokuBoard, \"uBiE+UiLNd3BHpunyqbmcMJrf3g=\", false, function () {\n  return [usePencilMarks];\n});\n_c = ComparisonSudokuBoard;\nexport default ComparisonSudokuBoard;\nvar _c;\n$RefreshReg$(_c, \"ComparisonSudokuBoard\");","map":{"version":3,"names":["React","useState","useEffect","ComparisonSudokuCell","updatePencilMarks","usePencilMarks","jsxDEV","_jsxDEV","ComparisonSudokuBoard","_s","generatedPuzzle","setGeneratedPuzzle","Array","from","length","userAnswers","setUserAnswers","pencilMarks","setPencilMarks","showPencilMarks","setShowPencilMarks","handleGenerateMarksClick","manualPencilMarks","setManualPencilMarks","manualPencilMode","setManualPencilMode","activeCell","setActiveCell","manualPencilColors","setManualPencilColors","selectedColor","setSelectedColor","updatedPencilMarks","className","children","map","row","rowIndex","cellData","colIndex","subgridIndex","getSubgridIndex","isOriginalCell","isUserCell","adjacentBorders","value","symbol","push","handleCellClick","handlePencilMarksChange","e","handleCellChange","generatedCellValue","applyColorToCell","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","target","onClick","handleAutoGenerateClick","_c","$RefreshReg$"],"sources":["/Users/kumarprasad/Desktop/sudoku-project-indro-sudoku/src/ComparisonSudokuBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SudokuGrid.css';\nimport ComparisonSudokuCell from './ComparisonSudokuCell';\nimport { updatePencilMarks, usePencilMarks } from './PencilMarking';\n\nconst ComparisonSudokuBoard = () => {\n  const [generatedPuzzle, setGeneratedPuzzle] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const [userAnswers, setUserAnswers] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const { pencilMarks, setPencilMarks, showPencilMarks, setShowPencilMarks, handleGenerateMarksClick } = usePencilMarks();\n  const [manualPencilMarks, setManualPencilMarks] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => [])));\n  const [manualPencilMode, setManualPencilMode] = useState(false);\n  const [activeCell, setActiveCell] = useState(null);\n  const [manualPencilColors, setManualPencilColors] = useState(Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => '')));\n  const [selectedColor, setSelectedColor] = useState('#000000');\n\n  // ... (rest of the functions)\n\n  useEffect(() => {\n    if (showPencilMarks) {\n      const updatedPencilMarks = updatePencilMarks(userAnswers);\n      setPencilMarks(updatedPencilMarks);\n    }\n  }, [showPencilMarks, userAnswers, setPencilMarks]);\n\n  return (\n    <div className=\"sudoku-board\">\n      {generatedPuzzle.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"sudoku-row\">\n          {row.map((cellData, colIndex) => {\n            const subgridIndex = getSubgridIndex(rowIndex, colIndex);\n            const isOriginalCell = generatedPuzzle[rowIndex][colIndex] !== '';\n            const isUserCell = userAnswers[rowIndex][colIndex] !== '';\n\n            const adjacentBorders = [];\n\n            if (rowIndex > 0 && row[rowIndex - 1].value && row[rowIndex - 1].symbol) {\n              adjacentBorders.push('up');\n            }\n            if (rowIndex < 8 && row[rowIndex + 1].value && row[rowIndex + 1].symbol) {\n              adjacentBorders.push('down');\n            }\n            if (colIndex > 0 && row[colIndex - 1].value && row[colIndex - 1].symbol) {\n              adjacentBorders.push('left');\n            }\n            if (colIndex < 8 && row[colIndex + 1].value && row[colIndex + 1].symbol) {\n              adjacentBorders.push('right');\n            }\n\n            return (\n              <ComparisonSudokuCell\n                key={colIndex}\n                cellData={cellData}\n                adjacentBorders={adjacentBorders}\n                subgridIndex={subgridIndex}\n                manualPencilMode={manualPencilMode}\n                manualPencilColors={manualPencilColors}\n                manualPencilMarks={manualPencilMarks}\n                handleCellClick={() => handleCellClick(rowIndex, colIndex)}\n                handlePencilMarksChange={(e) => handlePencilMarksChange(e, rowIndex, colIndex)}\n                handleCellChange={(e) => handleCellChange(e, rowIndex, colIndex)}\n                showPencilMarks={showPencilMarks}\n                isOriginalCell={isOriginalCell}\n                isUserCell={isUserCell}\n                pencilMarks={pencilMarks[rowIndex][colIndex]}\n                generatedCellValue={generatedPuzzle[rowIndex][colIndex]}\n                selectedColor={selectedColor}\n                applyColorToCell={() => applyColorToCell(rowIndex, colIndex)}\n              />\n            );\n          })}\n        </div>\n      ))}\n      <div className=\"color-picker-container\">\n        <input\n          type=\"color\"\n          value={selectedColor}\n          onChange={(e) => setSelectedColor(e.target.value)}\n          onClick={applyColorToCell}\n          className=\"color-picker-input\"\n        />\n      </div>\n      <button onClick={() => setManualPencilMode(!manualPencilMode)}>\n        {manualPencilMode ? 'Exit Pencil Mode' : 'Enter Pencil Mode'}\n      </button>\n      <button onClick={handleGenerateMarksClick}>Generate Pencil Marks</button>\n      <button onClick={handleAutoGenerateClick}>Auto Generate Puzzle</button>\n    </div>\n  );\n};\n\nexport default ComparisonSudokuBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}